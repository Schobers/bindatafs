// Code generated by go-bindata.
// sources:
// tests/css/fs.css
// tests/index.html
// tests/js/bin.js
// tests/js/fs.js
// DO NOT EDIT!

package bindatafs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testsCssFsCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\x4f\xa9\x54\xa8\xe6\xe5\x52\x50\x48\xce\xcf\xc9\x2f\xb2\x52\x50\x36\x48\xb6\x48\x4c\x49\xb1\x30\xb4\xe6\xe5\xaa\x05\x04\x00\x00\xff\xff\x87\xaf\x8e\x5e\x1e\x00\x00\x00")

func testsCssFsCssBytes() ([]byte, error) {
	return bindataRead(
		_testsCssFsCss,
		"tests/css/fs.css",
	)
}

func testsCssFsCss() (*asset, error) {
	bytes, err := testsCssFsCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tests/css/fs.css", size: 30, mode: os.FileMode(438), modTime: time.Unix(1502774045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\x0e\x42\x21\x0c\x05\xf7\x4d\x7a\x87\x86\x03\xd8\x0b\xf4\x73\x17\x7f\x81\x00\x22\x1a\xca\xc6\xdb\x1b\x91\xb8\x71\xfd\x66\x26\x4f\xf2\xbc\x37\x8f\x80\x20\x39\x5e\x83\x47\x20\x92\x56\xfa\x8d\xf2\x88\xe9\x70\x6a\xc6\xc9\x2e\x6a\xe6\x88\x3d\x82\xf0\xc6\x10\xe4\x7c\x84\xd7\x57\x30\x1d\xe5\x39\xc9\x86\x1e\xae\x2e\xa1\x6e\xfe\x7f\x3c\x4b\xff\xad\xc2\xbb\xb1\xc2\x9f\x27\xef\x00\x00\x00\xff\xff\xbe\x2d\xc3\x0c\x90\x00\x00\x00")

func testsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_testsIndexHtml,
		"tests/index.html",
	)
}

func testsIndexHtml() (*asset, error) {
	bytes, err := testsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tests/index.html", size: 144, mode: os.FileMode(438), modTime: time.Unix(1502774139, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsJsBinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x48\xca\xcc\xd3\xd0\x54\xa8\xe6\xe5\x52\x50\x28\x4a\x2d\x29\x2d\xca\x53\x48\x2b\xd6\xd0\xb4\xe6\xe5\xaa\x05\x04\x00\x00\xff\xff\x62\x77\x46\x8e\x23\x00\x00\x00")

func testsJsBinJsBytes() ([]byte, error) {
	return bindataRead(
		_testsJsBinJs,
		"tests/js/bin.js",
	)
}

func testsJsBinJs() (*asset, error) {
	bytes, err := testsJsBinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tests/js/bin.js", size: 35, mode: os.FileMode(438), modTime: time.Unix(1502774186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testsJsFsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x48\x2b\xd6\xd0\x54\xa8\xe6\xe5\x52\x50\x28\x4a\x2d\x29\x2d\xca\x53\x50\x4a\x4c\x4b\x2d\xca\x57\xb2\xe6\xe5\xaa\x05\x04\x00\x00\xff\xff\x99\xa7\x61\x4b\x25\x00\x00\x00")

func testsJsFsJsBytes() ([]byte, error) {
	return bindataRead(
		_testsJsFsJs,
		"tests/js/fs.js",
	)
}

func testsJsFsJs() (*asset, error) {
	bytes, err := testsJsFsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tests/js/fs.js", size: 37, mode: os.FileMode(438), modTime: time.Unix(1502774177, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tests/css/fs.css": testsCssFsCss,
	"tests/index.html": testsIndexHtml,
	"tests/js/bin.js":  testsJsBinJs,
	"tests/js/fs.js":   testsJsFsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tests": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"fs.css": &bintree{testsCssFsCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{testsIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"bin.js": &bintree{testsJsBinJs, map[string]*bintree{}},
			"fs.js":  &bintree{testsJsFsJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
